avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,medspace , color = artist_gender_race)) +
geom_line()
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, artist_race_nwi)) %>%
filter((book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,avgspace , color = artist_gender_race)) +
geom_line()
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, artist_race_nwi)) %>%
filter((book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,maxspace , color = artist_gender_race)) +
geom_line()
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, artist_race_nwi)) %>%
filter(!(book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,maxspace , color = artist_gender_race)) +
geom_line()
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, artist_race_nwi)) %>%
filter(!(book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,maxspace , color = artist_gender_race)) +
geom_line() +
coord_flip()
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, artist_race_nwi)) %>%
filter(!(book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,avgspace , color = artist_gender_race)) +
geom_line() +
coord_flip()
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, artist_race_nwi)) %>%
filter(!(book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,avgspace , color = artist_gender_race)) +
geom_line()
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, artist_race_nwi)) %>%
filter(!(book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,medspace , color = artist_gender_race)) +
geom_line()
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, artist_race_nwi)) %>%
filter(!(book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,maxspace , color = artist_gender_race)) +
geom_line()
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, artist_race_nwi)) %>%
filter(!(book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,maxspace , color = artist_gender_race)) +
geom_line(size = 2, alpha = 0.7)
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, artist_race_nwi)) %>%
filter(!(book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,maxspace , color = artist_gender_race)) +
geom_line(size = 2, alpha = 0.2)
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, artist_race_nwi)) %>%
filter(!(book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,maxspace , color = artist_gender_race)) +
geom_line(size = 2, alpha = 0.3)
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, artist_race_nwi, "_")) %>%
filter(!(book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,maxspace , color = artist_gender_race)) +
geom_line(size = 2, alpha = 0.3)
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, "_", artist_race_nwi)) %>%
filter(!(book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,maxspace , color = artist_gender_race)) +
geom_line(size = 2, alpha = 0.3)
artists %>%
# filter(year >= 2000) %>%
mutate(artist_gender_race = str_c(artist_gender, "_", artist_race_nwi)) %>%
# filter(!(book %in% c("Gardner"))) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,maxspace , color = artist_gender_race)) +
geom_line(size = 2, alpha = 0.3)
artists %>% distinct(book)
artists %>%
mutate(artist_gender_race = str_c(artist_gender, "_", artist_race_nwi)) %>%
filter(book %in% c("Janson")) %>%
group_by(year, artist_gender_race) %>%
summarise(maxspace = max(space_ratio_per_page_total, na.rm=TRUE),
avgspace = mean(space_ratio_per_page_total, na.rm=TRUE),
medspace = median(space_ratio_per_page_total, na.rm=TRUE),
minspace = min(space_ratio_per_page_total, na.rm=TRUE)) %>%
ungroup() %>%
# pivot_longer(maxspace:minspace,names_to = "type", values_to = "value") %>%
# filter((type == "avgspace" & artist_gender_race == "Female") | (type == "avgspace" & artist_gender_race == "Male")) %>%
ggplot(aes(year,maxspace , color = artist_gender_race)) +
geom_line(size = 2, alpha = 0.3)
library(shiny)
library(dplyr)
# Define filter module
filter_data <- function(data, cyl_filter, hp_filter) {
filtered_data <- data %>%
filter(cyl == cyl_filter) %>%
filter(hp >= hp_filter[1] & hp <= hp_filter[2])
return(filtered_data)
}
# Define module for input controls
input_controls_ui <- function(id) {
ns <- NS(id)
tagList(
selectInput(ns("cyl_input"), "Number of cylinders:", choices = unique(mtcars$cyl)),
sliderInput(ns("hp_input"), "Horsepower range:", min = 0, max = 400, value = c(50, 300))
)
}
input_controls <- function(input, output, session) {
return(list(
cyl_input = reactive(input$cyl_input),
hp_input = reactive(input$hp_input)
))
}
# Define module for table output
table_output_ui <- function(id) {
ns <- NS(id)
tableOutput(ns("table_output"))
}
table_output <- function(input, output, session, data, cyl_filter, hp_filter) {
output$table_output <- renderTable({
filtered_data <- filter_data(data(), cyl_filter(), hp_filter())
filtered_data
})
}
# Define UI for the app
ui <- fluidPage(
titlePanel("mtcars dataset with modules"),
sidebarLayout(
sidebarPanel(
input_controls_ui("input_controls_1"),
input_controls_ui("input_controls_2")
),
mainPanel(
table_output_ui("table_output_1"),
table_output_ui("table_output_2")
)
)
)
# Define server logic for the app
server <- function(input, output, session) {
# Call input controls module 1
input_controls_1 <- callModule(input_controls, "input_controls_1")
# Call input controls module 2
input_controls_2 <- callModule(input_controls, "input_controls_2")
# Call table output module 1
callModule(
table_output,
"table_output_1",
data = reactive(mtcars),
cyl_filter = input_controls_1$cyl_input,
hp_filter = input_controls_1$hp_input
)
# Call table output module 2
callModule(
table_output,
"table_output_2",
data = reactive(mtcars),
cyl_filter = input_controls_2$cyl_input + 2,
hp_filter = input_controls_2$hp_input
)
}
# Run the app
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(ggplot2)
# Define plot module
plot_data <- function(data1, data2) {
# Plot 1
plot1 <- ggplot(data1, aes(x = wt, y = mpg)) +
geom_point() +
ggtitle("Table 1 Plot")
# Plot 2
plot2 <- ggplot(data2, aes(x = qsec, y = mpg)) +
geom_point() +
ggtitle("Table 2 Plot")
# Return both plots as a list
return(list(plot1 = plot1, plot2 = plot2))
}
# Define UI for the plot module
plot_ui <- function(id) {
ns <- NS(id)
tagList(
plotOutput(ns("plot1")),
plotOutput(ns("plot2"))
)
}
# Define server logic for the plot module
plot_server <- function(input, output, session, data1, data2) {
# Call plot_data module to get the two plots
plot_data_list <- reactive({
plot_data(data1(), data2())
})
# Output plot 1
output$plot1 <- renderPlot({
plot_data_list()$plot1
})
# Output plot 2
output$plot2 <- renderPlot({
plot_data_list()$plot2
})
}
# Define UI for the app
ui <- fluidPage(
titlePanel("mtcars dataset with modules"),
sidebarLayout(
sidebarPanel(
selectInput("cyl_input", "Number of cylinders:", choices = unique(mtcars$cyl)),
sliderInput("hp_input", "Horsepower range:", min = 0, max = 400, value = c(50, 300))
),
mainPanel(
tableOutput("table1_output"),
tableOutput("table2_output"),
plot_ui("plot_output")
)
)
)
# Define server logic for the app
server <- function(input, output, session) {
# Define filter module
filter_data <- function(data, cyl_filter, hp_filter) {
filtered_data <- data %>%
filter(cyl == cyl_filter) %>%
filter(hp >= hp_filter[1] & hp <= hp_filter[2])
return(filtered_data)
}
# Call filter module for table 1
filtered_data_1 <- reactive({
filter_data(mtcars, input$cyl_input, input$hp_input)
})
# Call filter module for table 2
filtered_data_2 <- reactive({
filter_data(mtcars, input$cyl_input + 2, input$hp_input)
})
# Output table 1
output$table1_output <- renderTable({
filtered_data_1()
})
# Output table 2
output$table2_output <- renderTable({
filtered_data_2()
})
# Call plot module
callModule(
plot_server,
"plot_output",
data1 = filtered_data_1,
data2 = filtered_data_2
)
}
# Run the app
shinyApp(ui = ui, server = server)
mtcars
unique(mtcars$cyl)
# Define filter module
filter_data <- function(data, cyl_filter, hp_filter) {
filtered_data <- data %>%
filter(cyl == cyl_filter) %>%
filter(hp >= hp_filter[1] & hp <= hp_filter[2])
return(filtered_data)
}
# Define module for input controls
input_controls_ui <- function(id) {
ns <- NS(id)
tagList(
selectInput(ns("cyl_input"), "Number of cylinders:", choices = unique(mtcars$cyl), selected = 4),
sliderInput(ns("hp_input"), "Horsepower range:", min = 0, max = 400, value = c(50, 300))
)
}
input_controls <- function(input, output, session) {
return(list(
cyl_input = reactive(input$cyl_input),
hp_input = reactive(input$hp_input)
))
}
# Define module for table output
table_output_ui <- function(id) {
ns <- NS(id)
tableOutput(ns("table_output"))
}
table_output <- function(input, output, session, data, cyl_filter, hp_filter) {
output$table_output <- renderTable({
filtered_data <- filter_data(data(), cyl_filter(), hp_filter())
filtered_data
})
}
# Define UI for the app
ui <- fluidPage(
titlePanel("mtcars dataset with modules"),
sidebarLayout(
sidebarPanel(
input_controls_ui("input_controls_1"),
input_controls_ui("input_controls_2")
),
mainPanel(
table_output_ui("table_output_1"),
table_output_ui("table_output_2")
)
)
)
# Define server logic for the app
server <- function(input, output, session) {
# Call input controls module 1
input_controls_1 <- callModule(input_controls, "input_controls_1")
# Call input controls module 2
input_controls_2 <- callModule(input_controls, "input_controls_2")
# Call table output module 1
callModule(
table_output,
"table_output_1",
data = reactive(mtcars),
cyl_filter = input_controls_1$cyl_input,
hp_filter = input_controls_1$hp_input
)
# Call table output module 2
callModule(
table_output,
"table_output_2",
data = reactive(mtcars),
cyl_filter = input_controls_2$cyl_input + 2,
hp_filter = input_controls_2$hp_input
)
}
# Run the app
shinyApp(ui = ui, server = server)
# For EDA
library(tidyverse)
library(DT)
library(lubridate)
library(tidyquant)
library(viridis)
library(thematic)
library(tidytext)
library(magick)
library(ggimage)
# For interacting between python and R
library(reticulate)
# For storing any secret keys required by API calls
library(dotenv)
setwd("~/GitHub/R_Python_Reticulate")
source_python("python_api_functions.py")
source("functions_r.R")
load_dot_env("rav.env")
authUsername = Sys.getenv('authUsername')
authPassword = Sys.getenv('authPassword')
rav_username_input1 <- 'rieslingm'
rav_username_input2 <- 'yarnsandcoffee'
page_sizeinput <- 1500
pagelist <- 1:14
startdate <- date("2020-01-01")
enddate   <- date("2022-05-01")
queue_tbl <- get_queue(authUsername, authPassword, rav_username = rav_username_input1, query = '', page = 1, page_size = page_sizeinput)
fav_tbl <- pagelist %>%
map_dfr(~(get_favorites(authUsername, authPassword, rav_username = 'yarnsandcoffee', page = .x) %>% select(id, created_at, favorited.id, favorited.name))) %>%
mutate(pattern_id = favorited.id)
projects_tbl <- queue_tbl %>%
mutate(username = rav_username_input1) %>%
select(username, created_at, pattern_id) %>%
rbind(
fav_tbl %>%
mutate(username = rav_username_input2) %>%
select(username, created_at, pattern_id)
)
projects_date_formatted <- projects_tbl %>%
mutate(created_at = date(created_at)) %>%
mutate(month_year = floor_date(created_at %m-% months(0), 'month')) %>%
mutate(quarter_year = floor_date(month_year, unit = "quarter")) %>%
mutate(semester_year = floor_date(month_year, unit = "6 month")) %>%
filter(created_at >= startdate & created_at <= enddate) %>%
mutate(row = row_number())
safer_pattern_details_from_int_pattern_id <- possibly(pattern_details_from_int_pattern_id, otherwise = NULL)
k<-0
project_patterns_details <- projects_date_formatted %>%
split(.$row) %>%
map(~safer_pattern_details_from_int_pattern_id(select(.,pattern_id ) %>% pull()))
project_patterns_details_compact <- compact(project_patterns_details) %>%
map(~select(., id, name, pattern_author.name, published, free, difficulty_average, difficulty_count, permalink, favorites_count, projects_count,queued_projects_count, rating_average, rating_count, yardage, yardage_max, yarn_weight_description, craft.name, pattern_author.knitting_pattern_count, pattern_author.crochet_pattern_count, pattern_type.clothing, pattern_type.name, pattern_needle_sizes, yardage_description, pattern_categories, pattern_attributes))
project_patterns_details <- projects_date_formatted %>%
split(.$row) %>%
map(~safer_pattern_details_from_int_pattern_id(select(.,pattern_id ) %>% pull()))
setwd("~/GitHub/R_Python_Reticulate")
cwd
