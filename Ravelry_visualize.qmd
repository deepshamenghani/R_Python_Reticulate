---
title: "Ravelry data visualization"
description: This article shows the different data analysis possible through the Ravelry API
date: today 
author: Deepsha Menghani and Riesling Meyer
url: https://github.com/deepshamenghani
title-block-banner: true
format:
  html:
    theme: flatly
    code-fold: false
    toc: false
    number-sections: false
execute:
  freeze: auto
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  eval = TRUE,
  message = FALSE,
  warning = FALSE,
  fig.align = "center"
)
```

Riesling and I worked together on a Microsoft Hackathon project to analyze data around our common hobby using Python and R. For our Hackathon, we decided to use our data science skills to analyze our knitting queues on [Ravelry](https://www.ravelry.com/), a social networking and organizational website for any yarn related crafts. Through this project our goal was to:

1.  Learn to pull data with API calls in Python using Flask
2.  Access the output of Python API calls from R easily using Reticulate
3.  Analyze our project data using GGPlot in R
4.  Package a Data Science portfolio project

This is the second article in a four-part series aimed at going in-depth into each of the above steps. This article will provide you an overview of how we used the "[Reticulate](https://cran.r-project.org/web/packages/reticulate/index.html)" package to collaborate between R and Python.

You can find the first article in the series \[here\]() that gives a handy overview of APIs and a step-by-step guide on how to use APIs in Python for first time API users. To keep an eye out for upcoming articles in this series, follow [Riesling](https://medium.com/@rieslingfyi), [Deepsha](https://medium.com/@menghani.deepsha) or [Data Science \@ Microsoft](https://medium.com/data-science-at-microsoft) (all on medium).

```{r install packages, message=FALSE, warning=FALSE, include=TRUE, paged.print=FALSE, eval=TRUE, echo=TRUE}
# R

# For EDA
library(tidyverse)
library(DT)
library(lubridate)
library(tidyquant)
library(viridis)
library(tidytext)

# For interacting between python and R
library(reticulate)

# For storing any secret keys required by API calls
library(dotenv)

```

```{r source python functions file}
# R

source_python("python_api_functions.py")
source("functions_r.R")

```

```{r getting env variables}
# R

load_dot_env("rav.env")

authUsername = Sys.getenv('authUsername')
authPassword = Sys.getenv('authPassword')
```


```{r}
rav_username_input1 <- 'rieslingm'
rav_username_input2 <- 'yarnsandcoffee'

page_sizeinput <- 1500
pagelist <- 1:10

startdate <- date("2020-01-01")
enddate   <- date("2022-05-01")

queue_tbl <- get_queue(authUsername, authPassword, rav_username = rav_username_input1, query = '', page = 1, page_size = page_sizeinput)

fav_tbl <- pagelist %>% 
  map_dfr(~get_favorites(authUsername, authPassword, rav_username_input2, page = .x)) %>% 
  mutate(pattern_id = favorited.id)

```

```{r}
projects_tbl <- queue_tbl %>% 
  mutate(username = rav_username_input1) %>% 
  select(username, created_at, pattern_id) %>% 
  rbind(
    fav_tbl %>% 
      mutate(username = rav_username_input2) %>% 
      select(username, created_at, pattern_id)
  )

projects_date_formatted <- projects_tbl %>% 
  mutate(created_at = date(created_at)) %>% 
  mutate(month_year = floor_date(created_at %m-% months(0), 'month')) %>%
  mutate(quarter_year = floor_date(month_year, unit = "quarter")) %>%
  mutate(semester_year = floor_date(month_year, unit = "6 month")) %>% 
  filter(created_at >= startdate & created_at <= enddate) %>% 
  mutate(row = row_number())
```

```{r}

safer_pattern_details_from_int_pattern_id <- possibly(pattern_details_from_int_pattern_id, otherwise = NULL)

```


```{r getting project details}
k<-0

# The below took 770 seconds to run for a queue of length 943 so it was copied locally after running it once
# Start the clock!
ptm <- proc.time()

project_patterns_details <- projects_date_formatted %>%
  # filter(row <= 100 | (row >= 923 & row <= 1022)) %>% 
  split(.$row) %>%
  map(~safer_pattern_details_from_int_pattern_id(select(.,pattern_id ) %>% pull()))

group_errs = project_patterns_details %>%
     keep(~is.null(.x) ) %>%
     names()

project_patterns_details_compact <- compact(project_patterns_details) %>%
  map(~select(., id, name, pattern_author.name, published, free, difficulty_average, difficulty_count, permalink, favorites_count, projects_count,queued_projects_count, rating_average, rating_count, yardage, yardage_max, yarn_weight_description, craft.name, pattern_author.knitting_pattern_count, pattern_author.crochet_pattern_count, pattern_type.clothing, pattern_type.name, pattern_needle_sizes, yardage_description, pattern_categories, pattern_attributes))

project_patterns_details_reduce <- project_patterns_details_compact %>%
  map(~ mutate(.,published = as.character(published), rating_count = as.list(rating_count), yardage = as.list(yardage), yardage_max = as.list(yardage_max), yarn_weight_description = as.character(yarn_weight_description))) %>%
  reduce(rbind) %>%
  separate(yarn_weight_description,
           into = c("yarn_weight", "wpi"),
           sep = " ",
           remove = TRUE) %>% 
  mutate(yarn_weight_category = case_when(yarn_weight %in% c("Aran", "Worsted") ~ "Worsted",
                                          yarn_weight %in% c("DK") ~ "DK",
                                          yarn_weight %in% c("Lace", "Light", "Thread") ~ "Lace",
                                          yarn_weight %in% c("Fingering") ~ "Fingering",
                                          yarn_weight %in% c("Bulky", "Super", "Jumbo") ~ "Bulky",
                                          TRUE ~ "Other")) 

project_patterns_details_joined <- projects_date_formatted %>%
  inner_join(project_patterns_details_reduce %>% 
              select(pattern_id = id, pattern_author = name, everything()) 
            ) 

# Stop the clock
proc.time() - ptm

# writexl::write_xlsx(project_patterns_details_joined, "project_patterns_details_joined_May_2022.xlsx")
```


```{r reading project details}
# project_patterns_details_joined <- readxl::read_xlsx("project_patterns_details_joined_May_2022.xlsx")

```

```{r}

top_n = 5

top_n_authors_tbl <- project_patterns_details_joined %>%
  unnest(pattern_author.name) %>% 
  count(username, pattern_author.name) %>% 
  arrange(desc(n)) %>% 
  mutate(pattern_author.name = fct_reorder(as_factor(pattern_author.name),n)) %>% 
  group_by(username) %>%
  mutate(row = row_number()) %>% 
  filter(row <= top_n) %>% 
  ungroup() %>% 
  mutate(pattern_author.name = as.factor(pattern_author.name)) %>% 
  mutate(pattern_author.name = reorder_within(pattern_author.name, n, username))  

top_n_authors_tbl %>%
  ggplot(aes(pattern_author.name, n)) +
  geom_label(aes(x = pattern_author.name, y = n-2, label = n)) +
  geom_col(show.legend = FALSE, alpha = 0.5, fill = "#2c3e50") +
  facet_wrap(~username, scales = "free", nrow = 2) +
  coord_flip() +
  scale_x_reordered() +
  scale_y_continuous(expand = c(0,0)) +
  # theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.text.x  = element_blank(), 
    axis.title.y = element_blank()
  ) +
  labs(
    x = "Pattern author",
    title = str_glue("The most queued pattern authors by username")
  ) 
 
```





```{r}


patterns_added_by_date_tbl <- project_patterns_details_joined %>% 
  group_by(username,month_year) %>% 
  count() %>% 
  ungroup() 

patterns_added_by_date_tbl %>% 
  ggplot(aes(month_year, n, color = username)) + 
  geom_line() + 
  geom_point(size = 4,  alpha = 0.6) +
  scale_x_date(date_labels = "%b-%y", breaks = "2 month") +
  theme_tq() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.title.y = element_blank()
  ) +
  labs(
    title = "Count of patterns added to queue"
  ) +
  scale_color_tq() 

```

```{r}

yarn_weights_over_time <- project_patterns_details_joined  %>%
  mutate(value = 1) %>% 
  group_by(username, quarter_year, yarn_weight_category) %>%
  summarise(n = sum(value)) %>% 
  ungroup() %>% 
  complete(nesting(username, yarn_weight_category), quarter_year, fill = list(n=0)) %>% 
  group_by(username, quarter_year) %>%
  mutate(percentage = n/sum(n)) %>% 
  ungroup() 

yarn_weights_over_time %>% 
  ggplot(aes(x=quarter_year, y=percentage, fill=yarn_weight_category)) + 
  geom_area(alpha=0.4 , size=1) +
  facet_wrap(~ username)  +
  scale_fill_viridis(discrete = T) +
  theme_tq() +
  scale_x_date(date_labels = "%b-%y", breaks = "2 month") +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.title.y = element_blank()
  ) +
  labs(
    title = "Percantage of yarn weight over time added to queue"
  )

```

```{r}

top_patterns_by_user <- project_patterns_details_joined %>% 
  select(username, pattern_type.name) %>% 
  count(username, pattern_type.name) %>% 
  arrange(username,desc(n)) %>% 
  group_by(username) %>% 
  top_n(5) %>% 
  ungroup() %>% 
  mutate(username = as.factor(username)) %>% 
  mutate(pattern_type.name = as.factor(pattern_type.name)) %>% 
  mutate(pattern_type.name = reorder_within(pattern_type.name, n, username))  

top_patterns_by_user %>%
  ggplot(aes(pattern_type.name, n)) +
  geom_col(show.legend = FALSE, alpha = 0.5, fill = "#2c3e50") +
  facet_wrap(~username, scales = "free") +
  coord_flip() +
  scale_x_reordered() +
  scale_y_continuous(expand = c(0,0)) +
  labs(y = "Number of pattern types added to queue",
       x = NULL,
       title = "The most common pattern types added by Ravelry User") 


```

```{r}

daily_projects_added <- project_patterns_details_joined %>% 
  mutate(Weekday = weekdays(date(created_at))) %>% 
  count(username, Weekday)

daily_projects_added$Weekday = factor(daily_projects_added$Weekday, levels= c("Sunday", "Monday", 
    "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

daily_projects_added %>%  
  ggplot(aes(x=Weekday, n)) +
  geom_col(position = "dodge", alpha = 0.5, fill = "#2c3e50") + 
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, color = "#2c3e50"),
    axis.title.y = element_blank()
  ) +
  labs(
    title = "Count of patterns added to queue by day of week",
    x=""
  ) +
  facet_wrap(~username, scales = "free")

```

